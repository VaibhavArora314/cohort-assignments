/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require("express");
const bodyParser = require("body-parser");
const fs = require("fs");

const readTodos = () => {
  return new Promise((resolve) => {
    fs.readFile("todos.json", "utf-8", (err, data) => {
      resolve(JSON.parse(data));
    });
  });
};

const writeTodos = (data) => {
  return new Promise((resolve) => {
    fs.writeFile("todos.json", data, (err) => {
      resolve(true);
    });
  });
};

const app = express();

app.use(bodyParser.json());

app.get("/todos", async (req, res) => {
  const todos = await readTodos();
  res.json(todos);
});

app.get("/todos/:id", async (req, res) => {
  const id = req.params.id;
  const todos = await readTodos();

  let todoFound = false;
  todos.forEach((todo) => {
    if (todo.id == id) {
      todoFound = true;
      res.send(todo);
    }
  });

  if (!todoFound) res.status(404).send("No such todo!");
});

app.post("/todos", async (req, res) => {
  const newTodo = req.body;
  newTodo.id = new Date().getTime().toString(36);

  const todos = await readTodos();

  todos.push(newTodo);

  await writeTodos(JSON.stringify(todos));
  res.status(201).json({
    id: newTodo.id,
  });
});

app.put("/todos/:id", async (req, res) => {
  const id = req.params.id,
    body = req.body;

  const todos = await readTodos();

  let todoFound = false,
    updatedTodo = null;
  const updateTodos = todos.map((todo) => {
    if (todo.id == id) {
      todo.title = body.title;
      todo.completed = body.completed;
      todoFound = true;
      updatedTodo = todo;
    }
    return todo;
  });

  if (todoFound) {
    await writeTodos(JSON.stringify(updateTodos));
    res.status(200).json(updatedTodo);
  } else res.status(404).send("Todo not found");
});

app.delete("/todos/:id", async (req, res) => {
  const id = req.params.id;
  const todos = await readTodos();

  let todoFound = false;
  const updateTodos = todos.filter((todo) => {
    if (todo.id == id) {
      todoFound = true;
      return false;
    }
    return true;
  });

  if (todoFound) {
    await writeTodos(JSON.stringify(updateTodos));
    res.status(200).send("Todo deleted");
  } else res.status(404).send("Todo not found");
});

// app.listen(3000);

module.exports = app;
